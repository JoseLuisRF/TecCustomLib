name: Commit
on: push
jobs:
  commit_lint:
    name: Commit Lint
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node v20
        uses: actions/setup-node@v2
        with:
          node-version: 20
      - run: npm install -g @commitlint/config-conventional@18.6.0 @commitlint/cli@18.6.0
      - run: |
          CONFIG_COMMITLINT=$(cat << JSON
            {
              "extends": [
                "@commitlint/config-conventional"
              ]
            }
          JSON
          )
          echo $CONFIG_COMMITLINT > .commitlintrc.json
      - run: git log --pretty=format:"%s" $(git describe --tags --abbrev=0 @^)..@ | while read line; do echo "$line" | commitlint; done
  code_lint:
    name: Code Lint
    continue-on-error: true
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - run: curl -sSLO https://github.com/pinterest/ktlint/releases/download/1.2.1/ktlint && chmod a+x ktlint
      - name: Run ktlint (Android)
        run: |
          ./ktlint -F "**/src/**/*.kt" "!**/generated/**" --android --reporter=plain?group_by_file --disabled_rules=max-line-length
  unit_tests:
    name: Unit Tests
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - uses: gradle/gradle-build-action@v2.3.3
      - name: Execute Gradle build
        run: ./gradlew test
  determine_version:
    name: Version Determination
    runs-on: [ubuntu-latest]
    outputs:
      releaseType: ${{ steps.dv.outputs.RELEASE_TYPE }}
      releaseChannel: ${{ steps.dv.outputs.RELEASE_CHANNEL }}
      buildVersion: ${{ steps.dv.outputs.BUILD_VERSION }}
    steps:
      - name: Setup Node v20
        uses: actions/setup-node@v2
        with:
          node-version: 20
      - name: Install Semantic Release
        run: |
          npm install -g semantic-release conventional-changelog-conventionalcommits@6
      - uses: actions/checkout@v4
      - name: Configure Semantic Release
        run: |
          CONFIG_SEMANTIC_RELEASE=$(cat << JSON
            {
              "plugins": [
                ["@semantic-release/commit-analyzer", {
                  "preset": "conventionalcommits"
                }]
              ]
            }
          JSON
          )
          echo $CONFIG_SEMANTIC_RELEASE > .releaserc.json
      - name: Determine Version
        id: dv
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          SEM_RELEASE="$(semantic-release --dry-run || true)"
          echo "$SEM_RELEASE"
          NEXT_VERSION=$(echo "$SEM_RELEASE" | (grep 'next release version is' || true) | sed -n -e 's/.*next release version is //p')
          if [ -z "$NEXT_VERSION" ]; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 || true);
            if [[ $PREVIOUS_TAG == v* ]]; then
              BUILD_VERSION="${PREVIOUS_TAG:1}";
            else
              BUILD_VERSION=1.0.0;
            fi
          else
            BUILD_VERSION=$NEXT_VERSION;
          fi
          NEXT_RELEASE_TYPE=$(echo "$SEM_RELEASE" | (grep 'commits complete' || true) | sed 's/.*complete. \(.*\) release/\1/')
          if [[ "$NEXT_RELEASE_TYPE" == "no" ]]; then RELEASE_TYPE=""; else RELEASE_TYPE=$NEXT_RELEASE_TYPE; fi
          NEXT_RELEASE_CHANNEL=$(echo "$SEM_RELEASE" | (grep 'Published release' || true) | sed 's/.*on \(.*\) channel/\1/')
          if [[ -z "$NEXT_RELEASE_CHANNEL" ]]; then RELEASE_CHANNEL=""; else RELEASE_CHANNEL=$NEXT_RELEASE_CHANNEL; fi
          echo "Release Type: $RELEASE_TYPE"
          echo "Release Channel: $RELEASE_CHANNEL"
          echo "Build Version: $BUILD_VERSION"
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "RELEASE_CHANNEL=$RELEASE_CHANNEL" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_OUTPUT
  build:
    name: Build
    runs-on: [ubuntu-latest]
    needs: determine_version
    env:
      BUILD_VERSION: ${{ needs.determine_version.outputs.buildVersion }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - name: Build Library
        uses: gradle/gradle-build-action@v2.3.3
        with:
          arguments: assemble
      - uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: |
            **/build/outputs/aar/*-release.aar
            **/build/libs/*.jar
            !**/build/libs/*-sources.jar
      - uses: actions/upload-artifact@v3
        with:
          name: generated-sources
          path: '**/build/generated/source/**'
  release:
    name: Release
    runs-on: [ubuntu-latest]
    needs: [determine_version, commit_lint, unit_tests, build]
    if: needs.determine_version.outputs.releaseType != ''
    outputs:
      releaseType: ${{ steps.sr.outputs.RELEASE_TYPE }}
      releaseChannel: ${{ steps.sr.outputs.RELEASE_CHANNEL }}
      buildVersion: ${{ steps.sr.outputs.BUILD_VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node v20
        uses: actions/setup-node@v2
        with:
          node-version: 20
      - name: Install Semantic Release
        run: npm install -g semantic-release conventional-changelog-conventionalcommits@6
      - name: Configure Semantic Release
        run: |
          CONFIG_SEMANTIC_RELEASE=$(cat << JSON
            {
              "plugins": [
                ["@semantic-release/commit-analyzer", {
                  "preset": "conventionalcommits"
                }],
                ["@semantic-release/release-notes-generator", {
                  "preset": "conventionalcommits"
                }],
                "@semantic-release/github"
              ]
            }
          JSON
          )
          echo $CONFIG_SEMANTIC_RELEASE > .releaserc.json
      - name: Run Semantic Release
        id: sr
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        run: |
          SEM_RELEASE="$(semantic-release || true)"
          echo "$SEM_RELEASE"
          NEXT_VERSION=$(echo "$SEM_RELEASE" | (grep 'next release version is' || true) | sed -n -e 's/.*next release version is //p')
          if [ -z "$NEXT_VERSION" ]; then PREVIOUS_TAG=$(git describe --tags --abbrev=0); BUILD_VERSION="${PREVIOUS_TAG:1}"; else BUILD_VERSION=$NEXT_VERSION; fi
          NEXT_RELEASE_TYPE=$(echo "$SEM_RELEASE" | (grep 'commits complete' || true) | sed 's/.*complete. \(.*\) release/\1/')
          if [[ "$NEXT_RELEASE_TYPE" == "no" ]]; then RELEASE_TYPE=""; else RELEASE_TYPE=$NEXT_RELEASE_TYPE; fi
          NEXT_RELEASE_CHANNEL=$(echo "$SEM_RELEASE" | (grep 'Published release' || true) | sed 's/.*on \(.*\) channel/\1/')
          if [[ -z "$NEXT_RELEASE_CHANNEL" ]]; then RELEASE_CHANNEL=""; else RELEASE_CHANNEL=$NEXT_RELEASE_CHANNEL; fi
          echo "Release Type: $RELEASE_TYPE"
          echo "Release Channel: $RELEASE_CHANNEL"
          echo "Build Version: $BUILD_VERSION"
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "RELEASE_CHANNEL=$RELEASE_CHANNEL" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_OUTPUT
  publish:
    name: Publication
    runs-on: [ubuntu-latest]
    needs: release
    if: needs.release.outputs.releaseType != ''
    env:
      RELEASE_TYPE: ${{ needs.release.outputs.releaseType }}
      RELEASE_CHANNEL: ${{ needs.release.outputs.releaseChannel }}
      BUILD_VERSION: ${{ needs.release.outputs.buildVersion }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - uses: actions/download-artifact@v3
        with:
          name: artifact
      - uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: generated-sources
      - uses: gradle/gradle-build-action@v2.3.3
        with:
          arguments: publishAllPublicationsToGitHubPackagesRepository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}